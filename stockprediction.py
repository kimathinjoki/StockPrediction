# -*- coding: utf-8 -*-
"""StockPrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Gk3hQu1kx9BtWS5MQKR1WNxPApdxsf1J
"""

import math
import pandas_datareader as web
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

#get the stock quote
df = web.DataReader('AAPL', data_source='yahoo', start='2012-01-01', end='2020-04-14')

df

df.shape

#visualize the closing price
plt.figure(figsize=(16,8))
plt.title('Closing Price History')
plt.plot(df['Close'])
plt.xlabel('Date', fontsize=18)
plt.ylabel('Closing Price (USD)', fontsize=18)
plt.show()

#  create new data frame with only the Ã§lose column
data = df.filter(['Close'])
# convert the datadrame to a numpy array
dataset = data.values
#get the numbers of rows to train the nmodel on
training_data_len =math.ceil(len(dataset) * .8) 

training_data_len

# scale the data
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)

scaled_data

# creating training data set
#create the scaled training data set
train_data = scaled_data[0:training_data_len , :] 
# split the data into x_train and y_train data sets

x_train = []
y_train = []

for i in range(60, len(train_data)):
  x_train.append(train_data[i-60:i, 0])
  y_train.append(train_data[i, 0])
  if i<= 60:
    print(x_train)
    print(y_train)
    print()

#convert the x_train and y_train to numpy array

x_train, y_train = np.array(x_train), np.array(y_train)

#reshape the data
x_train = np.reshape(x_train, (x_train.shape[0],x_train.shape[1], 1))

x_train.shape

#build the lstm model
model = Sequential()

model.add(LSTM(50, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

#compile the model

model.compile(optimizer='adam', loss= 'mean_squared_error')

#train the model
model.fit(x_train, y_train,batch_size=1, epochs=1)

#create the testing data set
#create a new array containing scaled values  from index 1607 to 2003
test_data = scaled_data[training_data_len - 60: , :]
# create the data stes X_tests and y_test
x_test =[]
y_test= dataset[training_data_len:, :]

for i in range(60, len(test_data)):
  x_test.append(test_data[i-60:i, 0])

#conver the data  to a numpy array
x_test = np.array(x_test)

#reshape the data
x_test = np.reshape(x_test,(x_test.shape[0], x_test.shape[1], 1))

# Get the models predicted price values
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

# get the root mean squared error (RMSE)

rmse =np.sqrt(np.mean(predictions - y_test)**2)

rmse

# plot the data

train = data[:training_data_len]
valid = data[training_data_len:]

valid['Predictions'] = predictions
#visualize the data

plt.figure(figsize=(16,18))
plt.title('Model')
plt.xlabel('Date',fontsize=18)
plt.ylabel('Close Price USD', fontsize=18)
plt.plot(train['Close'])
plt.plot(valid[['Close','Predictions']])
plt.legend(['Train','Val', 'Prediction'], loc='lower right')
plt.show()

#show the valis and predicted prices

valid

# get the quote
apple_quote = web.DataReader('AAPL', data_source='yahoo', start='2012-01-01', end='2020-4-16')
# create a new dataframe
new_df = apple_quote.filter(['Close'])
#get the last 60 days closing price value
last_60_days = new_df[-60:].values
#Scale the data to be values between 0 and 1
last_60_days_scaled = scaler.transform(last_60_days)
#create an empty list
X_test = []
#append the past 60 days
X_test.append(last_60_days_scaled)
#convert thX_test data set to a numpy array
X_test = np.array(X_test)
#resgape the data
X_test =np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
#get the predicted scaled price
pred_price =model.predict(X_test)
#undo the scaling
pred_price = scaler.inverse_transform(pred_price)
print(pred_price)



# get the quote
apple_quote = web.DataReader('AAPL', data_source='yahoo', start='2012-01-01', end='2020-4-16')
# create a new dataframe
new_df = apple_quote.filter(['Close'])
#get the last 60 days closing price value
last_60_days = new_df[-60:].values
#Scale the data to be values between 0 and 1
last_60_days_scaled = scaler.transform(last_60_days)
#create an empty list
X_test = []
#append the past 60 days
X_test.append(last_60_days_scaled)
#convert thX_test data set to a numpy array
X_test = np.array(X_test)
#resgape the data
X_test =np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
#get the predicted scaled price
pred_price =model.predict(X_test)
#undo the scaling
pred_price = scaler.inverse_transform(pred_price)
print(pred_price)



# get the quote
apple_quote = web.DataReader('AAPL', data_source='yahoo', start='2012-01-01', end='2020-4-16')
# create a new dataframe
new_df = apple_quote.filter(['Close'])
#get the last 60 days closing price value
last_60_days = new_df[-60:].values
#Scale the data to be values between 0 and 1
last_60_days_scaled = scaler.transform(last_60_days)
#create an empty list
X_test = []
#append the past 60 days
X_test.append(last_60_days_scaled)
#convert thX_test data set to a numpy array
X_test = np.array(X_test)
#resgape the data
X_test =np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
#get the predicted scaled price
pred_price =model.predict(X_test)
#undo the scaling
pred_price = scaler.inverse_transform(pred_price)
print(pred_price)

apple_quote2 = web.DataReader('AAPL', data_source='yahoo', start='2020-4-16', end='2020-4-16')
print(apple_quote2['Close'])

